#!/usr/bin/env bash
set -eo pipefail

COLOR_INFO="\033[1;34m"
COLOR_RESET="\033[0m"
COLOR_WARNING="\033[0;33m"
COLOR_SUCCESS="\033[0;32m"

# shellcheck source=bin/_config.sh
source "$(dirname "${BASH_SOURCE[0]}")/_config.sh"

function usage_setup() {
    echo -e "Usage: ${0} ${1} [OPTIONS] COMMAND

Generate certificate and its key (except if you specified you do not want with --no-cert option)
then generate Nginx SSL configuration file.

OPTIONS:
  -nc, --no-cert   skip certificate generation with mkcert
  -h, --help       print this message

COMMAND:
  help              print this message
"
}

# Utility function to generate nginx configuration to reverse proxy OpenEdx apps over https
with_cert=true

while true; do
  case "${1}" in
    -nc|--no-cert)
      with_cert=false
      break
      ;;
    -h | --help | help)
      usage_setup "${FUNCNAME[0]}"
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

# Check if nginx ssl conf already exist and if certificate exists and is still valid
if [ -f "docker/files/etc/nginx/ssl/cms.conf" ] &&
   [ -f "docker/files/etc/nginx/ssl/lms.conf" ] &&
   [ -f "docker/files/etc/nginx/ssl/edx.local.dev.key" ] &&
   [ -f "docker/files/etc/nginx/ssl/edx.local.dev.pem" ] &&
   openssl x509 -checkend 0 -noout -in "docker/files/etc/nginx/ssl/edx.local.dev.pem" ;
then
  echo -e "${COLOR_SUCCESS}✅ SSL configuration is already enabled and certificate is valid.${COLOR_RESET}\\n"
else
  if [[ "$with_cert" = true ]] ; then
    echo -e "${COLOR_INFO}> Generating certificate for edx.local.dev domain${COLOR_RESET}"
    # Generate fresh key and certificate files for edx.local.dev domain
    mkcert -key-file "docker/files/etc/nginx/ssl/edx.local.dev.key" \
          -cert-file "docker/files/etc/nginx/ssl/edx.local.dev.pem" \
          edx.local.dev
  else
    echo -e "${COLOR_INFO}> Certificate generation skipped.${COLOR_RESET}"
    echo -e "\\n${COLOR_WARNING}⚠️  A certificate is required!
  Skipping generation supposes that you generated your certificate and its key manually,
  at the following locations
  - docker/files/etc/nginx/ssl/edx.local.dev.key
  - docker/files/etc/nginx/ssl/edx.local.dev.pem
  ${COLOR_RESET}"
  fi

  echo -e "${COLOR_INFO}> Generating nginx configuration${COLOR_RESET}"

  ssl_template="docker/files/etc/nginx/ssl/ssl.conf.tpl"
  disclaimer="# /!\ DO NOT EDIT: this file is autogenerated"

  while read -r -d '' nginx_conf
  do
    # extract nginx conf name
    conf_filename="${nginx_conf//${NGINX_CONF_DIRECTORY}\//}"
    printf "%s\n" "${disclaimer}" > "docker/files/etc/nginx/ssl/${conf_filename}"

    # Search listen line then insert ssl between port number and ;
    # then append ssl.conf.tpl content after these line.
    # finally update permanent redirect on https://richie.local.dev:8070
    sed "s|^\(.*listen.*\)\(;\)$|\1 ssl\2|;
        s|http://localhost:8070|https://richie.local.dev:8070|g;
        /listen.*;$/r $ssl_template
    " \
        < "$nginx_conf" \
        >> "docker/files/etc/nginx/ssl/${conf_filename}"

  done < <(find "docker/files/etc/nginx/conf.d" -maxdepth 1 -mindepth 1 -type f -print0)
  echo -e "\\n✅  SSL is ready to use!\\n"
fi

echo -e "\\n${COLOR_INFO}> Starting SSL apps${COLOR_RESET}"
make run-ssl
echo -e "\\n${COLOR_SUCCESS}✅  OpenEdx is up and running on https://edx.local.dev:8073 !"
echo -e "\\n${COLOR_WARNING}Next time, just use the command below to start OpenEdx over ssl"
echo -e "> make run-ssl\\n"

exit 0
